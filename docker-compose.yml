services:
  # ----------------------------------------
  # PostgreSQL
  # ----------------------------------------
  db:
    image: postgres:16-alpine
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - app-db-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      retries: 5
      timeout: 10s
      start_period: 30s
    ports:
      - "5444:5432"

  # ----------------------------------------
  # ML Service
  # ----------------------------------------
  ml-service:
    image: '${DOCKER_IMAGE_ML}:${TAG-latest}'
    build:
      context: ./ml-service
      dockerfile: Dockerfile
    environment:
      - ML_HOST=${ML_HOST}
    ports:
      - "3454:8000"
    volumes:
    - ./ml-service/app/data:/app/app/data:ro

  # ----------------------------------------
  # Backend (FastAPI)
  # ----------------------------------------
  backend:
    image: '${DOCKER_IMAGE_BACKEND}:${TAG-latest}'
    build:
      context: ./backend
    depends_on:
      db:
        condition: service_healthy
      ml-service:
        condition: service_started
    environment:
      - PROJECT_NAME=${PROJECT_NAME}
      - FRONTEND_HOST=${FRONTEND_HOST}
      - ENVIRONMENT=${ENVIRONMENT}
      - BACKEND_CORS_ORIGINS=${BACKEND_CORS_ORIGINS}
      - SECRET_KEY=${SECRET_KEY}
      - FIRST_SUPERUSER=${FIRST_SUPERUSER}
      - FIRST_SUPERUSER_PASSWORD=${FIRST_SUPERUSER_PASSWORD}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_TLS=${SMTP_TLS}
      - SMTP_SSL=${SMTP_SSL}
      - ML_HOST=${ML_HOST}
      - POSTGRES_SERVER=db
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/utils/health-check/"]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "8007:8000"

  # ----------------------------------------
  # Frontend
  # ----------------------------------------
  frontend:
    image: '${DOCKER_IMAGE_FRONTEND}:${TAG-latest}'
    build:
      context: ./frontend
      args:
        - VITE_API_URL=${VITE_API_URL}
        - NODE_ENV=production
    ports:
      - "5173:80"

volumes:
  app-db-data:
